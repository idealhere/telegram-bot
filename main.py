from telegram import Update, Bot
from telegram.ext import Updater, CommandHandler, CallbackContext
import ccxt
import pandas as pd
import pandas_ta as ta
import logging  # üëà –¥–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –ª–æ–≥–≥–µ—Ä–∞

from flask import Flask
from threading import Thread

app = Flask('')

@app.route('/')
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

def run():
    app.run(host='0.0.0.0', port=8080)

def keep_alive():
    t = Thread(target=run)
    t.start()


# üîß –®–ê–ì 1: –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    filename='structure_log.txt',
    level=logging.INFO,
    format='%(asctime)s ‚Äî %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)

# ‚Üê –í–æ—Ç —Ç–≤–æ–π –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
TOKEN = "7570443415:AAFTbFM6XoOFfSTnqo8eC3A5leB6SuKv2RY"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∏—Ä–∂—É Kucoin —á–µ—Ä–µ–∑ CCXT
exchange = ccxt.kucoin({'enableRateLimit': True})

def fetch_ohlcv(symbol='BTC/USDT', timeframe='30m', limit=100):
    data = exchange.fetch_ohlcv(symbol, timeframe, limit=limit)
    df = pd.DataFrame(data, columns=['ts','open','high','low','close','vol'])
    df['ts'] = pd.to_datetime(df['ts'], unit='ms')
    return df.set_index('ts')


def detect_market_structure(df):
    df['structure'] = None

    for i in range(2, len(df)):
        prev_high = df['high'].iloc[i - 1]
        prev_low = df['low'].iloc[i - 1]
        curr_high = df['high'].iloc[i]
        curr_low = df['low'].iloc[i]

        if curr_high > prev_high and curr_low > prev_low:
            df.at[df.index[i], 'structure'] = 'HH-HL'
        elif curr_high < prev_high and curr_low < prev_low:
            df.at[df.index[i], 'structure'] = 'LL-LH'
        elif curr_high > prev_high and curr_low < prev_low:
            df.at[df.index[i], 'structure'] = 'ChoCH'
        elif curr_high < prev_high and curr_low > prev_low:
            df.at[df.index[i], 'structure'] = 'BOS'

    return df

def compute_indicators(df):
    df['rsi']   = ta.rsi(df['close'], length=14)
    df['ema20'] = ta.ema(df['close'], length=20)
    df['ema50'] = ta.ema(df['close'], length=50)
    return df

def fetch_rsi_6h(symbol='BTC/USDT'):
    df = exchange.fetch_ohlcv(symbol, timeframe='6h', limit=100)
    df = pd.DataFrame(df, columns=['ts','open','high','low','close','vol'])
    df['ts'] = pd.to_datetime(df['ts'], unit='ms')
    df.set_index('ts', inplace=True)
    df['rsi'] = ta.rsi(df['close'], length=14)
    return df['rsi'].iloc[-1]

def generate_report(symbol='BTC/USDT'):
    print(f"üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞ –¥–ª—è {symbol}...")

    df = fetch_ohlcv(symbol=symbol)
    df = compute_indicators(df)
    last = df.iloc[-1]
    prev = df.iloc[-2]
    rsi_6h = fetch_rsi_6h(symbol=symbol)

    # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä—ã–Ω–∫–∞ –ø–æ 4h
    df_struct = fetch_ohlcv(symbol=symbol, timeframe='4h')
    df_struct = detect_market_structure(df_struct)
    structure = df_struct.iloc[-1].get('structure', '‚Äî')

    text = (
        f"üìä {symbol} (EMA: 30m, RSI: 6h)\n"
        f"–í—Ä–µ–º—è: {last.name}\n"
        f"–¶–µ–Ω–∞:  {last['close']:.2f} USDT\n"
        f"RSI (6h): {rsi_6h:.1f}\n"
        f"EMA20: {last['ema20']:.2f}\n"
        f"EMA50: {last['ema50']:.2f}\n\n"
    )

    # –î–æ–±–∞–≤–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ —Ç–µ–∫—Å—Ç
    if structure == 'HH-HL':
        text += "üìà –°—Ç—Ä—É–∫—Ç—É—Ä–∞ (4h): HH‚ÄìHL ‚Äî –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ ‚¨ÜÔ∏è\n"
    elif structure == 'LL-LH':
        text += "üìâ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ (4h): LL‚ÄìLH ‚Äî –Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ ‚¨áÔ∏è\n"
    elif structure == 'ChoCH':
        text += "‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω ChoCH ‚Äî –≤–æ–∑–º–æ–∂–Ω—ã–π —Ä–∞–∑–≤–æ—Ä–æ—Ç —Ç—Ä–µ–Ω–¥–∞ üîÑ\n"
        logging.info(f"{symbol} ‚Äî ChoCH –æ–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–∞ 4h")
    elif structure == 'BOS':
        text += "üîÅ –û–±–Ω–∞—Ä—É–∂–µ–Ω BOS ‚Äî —Ç—Ä–µ–Ω–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω ‚úÖ\n"
        logging.info(f"{symbol} ‚Äî BOS –æ–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–∞ 4h")

    # –°–∏–≥–Ω–∞–ª—ã EMA-–∫—Ä–æ—Å—Å–æ–≤–µ—Ä–∞
    if prev['ema20'] < prev['ema50'] and last['ema20'] > last['ema50']:
        text += "‚úÖ EMA20 –ø–µ—Ä–µ—Å–µ–∫–ª–∞ EMA50 —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö ‚Äî —Ä–æ—Å—Ç –≤–µ—Ä–æ—è—Ç–µ–Ω.\n"
    elif prev['ema20'] > prev['ema50'] and last['ema20'] < last['ema50']:
        text += "‚ùå EMA20 –ø–µ—Ä–µ—Å–µ–∫–ª–∞ EMA50 —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑ ‚Äî –ø–∞–¥–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ.\n"

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ –ø–æ –ø–æ–ª–æ–∂–µ–Ω–∏—é —Ü–µ–Ω—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ EMA
    if last['close'] > last['ema20'] and last['close'] > last['ema50']:
        text += "üìà –¶–µ–Ω–∞ –≤—ã—à–µ EMA20 –∏ EMA50 ‚Äî –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.\n"
    elif last['close'] < last['ema20'] and last['close'] < last['ema50']:
        text += "üìâ –¶–µ–Ω–∞ –Ω–∏–∂–µ EMA20 –∏ EMA50 ‚Äî –Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.\n"
    else:
        text += "‚ö†Ô∏è –¶–µ–Ω–∞ –º–µ–∂–¥—É EMA20 –∏ EMA50 ‚Äî —Ç—Ä–µ–Ω–¥ –Ω–µ—è—Å–µ–Ω.\n"

    # –°–∏–≥–Ω–∞–ª—ã RSI (–ø–æ 6-—á–∞—Å–æ–≤–æ–º—É —Ç–∞–π–º—Ñ—Ä–µ–π–º—É) + —Ñ–∏–ª—å—Ç—Ä –ø–æ EMA
    if rsi_6h < 33:
        text += "üü¢ RSI (6h) < 33 ‚Äî –∑–æ–Ω–∞ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏.\n"
        if last['close'] > last['ema20'] and last['close'] > last['ema50']:
            text += "üì• –°–∏–≥–Ω–∞–ª: –í—Ö–æ–¥ –≤ —Å–¥–µ–ª–∫—É –Ω–∞ –ø–æ–∫—É–ø–∫—É (–ø–æ RSI + –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ EMA).\n"
        else:
            text += "‚ö†Ô∏è RSI < 33, –Ω–æ —Ü–µ–Ω–∞ –Ω–µ –≤—ã—à–µ EMA20/EMA50 ‚Äî —Å–∏–≥–Ω–∞–ª –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.\n"
    elif rsi_6h > 70:
        text += "üî¥ RSI (6h) > 70 ‚Äî –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å.\n"
        if last['close'] < last['ema20'] and last['close'] < last['ema50']:
            text += "üì§ –°–∏–≥–Ω–∞–ª: –í–æ–∑–º–æ–∂–µ–Ω –≤—ã—Ö–æ–¥ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏ –∏–ª–∏ —à–æ—Ä—Ç (–ø–æ RSI + EMA).\n"
        else:
            text += "‚ö†Ô∏è RSI > 70, –Ω–æ —Ü–µ–Ω–∞ –Ω–µ –Ω–∏–∂–µ EMA20/EMA50 ‚Äî —Å–∏–≥–Ω–∞–ª –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.\n"
    else:
        # –ú—è–≥–∫–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        if 33 <= rsi_6h <= 36:
            text += "üü° RSI –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –∫ –∑–æ–Ω–µ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏ (33‚Äì36).\n"
        elif 65 <= rsi_6h <= 70:
            text += "üü° RSI –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –∫ –∑–æ–Ω–µ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏ (65‚Äì70).\n"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–∏–∑–æ—Å—Ç–∏ –∫ EMA
        near_ema20 = last['close'] > last['ema20'] * 0.995
        near_ema50 = last['close'] > last['ema50'] * 0.995
        if near_ema20 and near_ema50:
            text += "üü° –¶–µ–Ω–∞ –ø–æ—á—Ç–∏ –≤—ã—à–µ EMA20 –∏ EMA50 ‚Äî —Ç—Ä–µ–Ω–¥ –º–æ–∂–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å—Å—è.\n"

    return text



# Telegram-–±–æ—Ç
bot = Bot(token=TOKEN)

def start(update: Update, context: CallbackContext):
    update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –ø–æ BTC/USDT, ETH –∏ SOL.\n"
        "üì• –õ–æ–Ω–≥, üì§ —à–æ—Ä—Ç –∏ üü° —Ä–∞–Ω–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è ‚Äî —Ç–æ–ª—å–∫–æ –ø–æ –¥–µ–ª—É.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /subscribe –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –∏ /unsubscribe –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )

def send_analysis(context: CallbackContext):
    chat_id = context.job.context
    symbols = [
    'BTC/USDT', 'ETH/USDT', 'SOL/USDT', 'DOGE/USDT',
    'LTC/USDT', 'ADA/USDT', 'AVAX/USDT', 'UNI/USDT',
    'LINK/USDT', 'SHIB/USDT', 'ATOM/USDT'
]

    for symbol in symbols:
        try:
            report = generate_report(symbol=symbol)
            context.bot.send_message(chat_id=chat_id, text=report)
        except Exception as e:
            context.bot.send_message(chat_id=chat_id, text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {symbol}: {e}")

def send_filtered_analysis(context: CallbackContext):
    chat_id = context.job.context
    symbols = [
        'BTC/USDT', 'ETH/USDT', 'SOL/USDT', 'DOGE/USDT',
        'LTC/USDT', 'ADA/USDT', 'AVAX/USDT', 'UNI/USDT',
        'LINK/USDT', 'SHIB/USDT', 'ATOM/USDT'
    ]

    sent_count = 0  # ‚Üê —Å—á—ë—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤

    for symbol in symbols:
        try:
            report = generate_report(symbol=symbol)
            if any(x in report for x in ["üì•", "üì§", "üü°"]):
                context.bot.send_message(chat_id=chat_id, text=report)
                sent_count += 1
            else:
                print(f"[{symbol}] ‚Äî –Ω–µ—Ç —Å–∏–≥–Ω–∞–ª–∞, –æ—Ç—á—ë—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        except Exception as e:
            context.bot.send_message(chat_id=chat_id, text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {symbol}: {e}")

    # üßæ –§–∏–Ω–∞–ª—å–Ω—ã–π –∏—Ç–æ–≥
    summary = f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(symbols)} –ø–∞—Ä. –°–∏–≥–Ω–∞–ª—ã –Ω–∞–π–¥–µ–Ω—ã –ø–æ {sent_count} –∏–∑ –Ω–∏—Ö."
    context.bot.send_message(chat_id=chat_id, text=summary)




def subscribe(update: Update, context: CallbackContext):
    chat_id = update.message.chat_id

    text = (
        "üì¨ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞! "
        "üü¢ –õ–æ–Ω–≥ –∏ üî¥ —à–æ—Ä—Ç —Å–∏–≥–Ω–∞–ª—ã –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ –¥–µ–ª—É ‚Äî –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —à—É–º–∞.\n"
        "üü° –¢–∞–∫–∂–µ –ø–æ–ª—É—á–∞–µ—à—å —Ä–∞–Ω–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è, –∫–æ–≥–¥–∞ —Ä—ã–Ω–æ–∫ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –∫ —Ç–æ—á–∫–µ –≤—Ö–æ–¥–∞."
    )
    update.message.reply_text(text)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç, –Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–∏–≥–Ω–∞–ª
    context.job_queue.run_repeating(send_filtered_analysis, interval=1800, first=5, context=chat_id)


def unsubscribe(update: Update, context: CallbackContext):
    chat_id = update.message.chat_id
    jobs = context.job_queue.get_jobs_by_name(str(chat_id))
    for job in jobs:
        job.schedule_removal()
    update.message.reply_text("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")  # ‚Üê –¥–æ–±–∞–≤–ª–µ–Ω–æ
    updater = Updater(token=TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("subscribe", subscribe))
    dp.add_handler(CommandHandler("unsubscribe", unsubscribe))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞—é –∫–æ–º–∞–Ω–¥—ã –≤ Telegram...")  # ‚Üê –¥–æ–±–∞–≤–ª–µ–Ω–æ
    keep_alive()
    updater.start_polling()
    updater.idle()


if __name__ == "__main__":
    main()
