from telegram import Update, Bot
from telegram.ext import Updater, CommandHandler, CallbackContext
import ccxt
import pandas as pd
import pandas_ta as ta
import logging  # üëà –¥–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –ª–æ–≥–≥–µ—Ä–∞
import html
import time

from flask import Flask
from threading import Thread

app = Flask('')

@app.route('/')
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

def run():
    app.run(host='0.0.0.0', port=8080)

def keep_alive():
    t = Thread(target=run)
    t.start()


# üîß –®–ê–ì 1: –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    filename='structure_log.txt',
    level=logging.INFO,
    format='%(asctime)s ‚Äî %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)

# ‚Üê –í–æ—Ç —Ç–≤–æ–π –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
TOKEN = "7570443415:AAFTbFM6XoOFfSTnqo8eC3A5leB6SuKv2RY"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∏—Ä–∂—É Kucoin —á–µ—Ä–µ–∑ CCXT
exchange = ccxt.kucoin({'enableRateLimit': True})

def fetch_ohlcv(symbol='BTC/USDT', timeframe='30m', limit=100, retries=2):
    for attempt in range(retries + 1):
        try:
            data = exchange.fetch_ohlcv(symbol, timeframe=timeframe, limit=limit)
            df = pd.DataFrame(data, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
            df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
            df.set_index('timestamp', inplace=True)
            logging.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ {symbol} –ø–æ–ª—É—á–µ–Ω—ã —Å KuCoin (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
            return df
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} ‚Äî –æ—à–∏–±–∫–∞ KuCoin –ø–æ {symbol}: {e}")
            time.sleep(1)

    logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ {symbol} —Å KuCoin –ø–æ—Å–ª–µ {retries + 1} –ø–æ–ø—ã—Ç–æ–∫")
    return pd.DataFrame()  # –∏–ª–∏ raise, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã –±–æ—Ç —Å–∏–≥–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª


def detect_market_structure(df):
    df['structure'] = None

    for i in range(2, len(df)):
        prev_high = df['high'].iloc[i - 1]
        prev_low = df['low'].iloc[i - 1]
        curr_high = df['high'].iloc[i]
        curr_low = df['low'].iloc[i]

        if curr_high > prev_high and curr_low > prev_low:
            df.at[df.index[i], 'structure'] = 'HH-HL'
        elif curr_high < prev_high and curr_low < prev_low:
            df.at[df.index[i], 'structure'] = 'LL-LH'
        elif curr_high > prev_high and curr_low < prev_low:
            df.at[df.index[i], 'structure'] = 'ChoCH'
        elif curr_high < prev_high and curr_low > prev_low:
            df.at[df.index[i], 'structure'] = 'BOS'

    return df

def compute_indicators(df):
    df['rsi']   = ta.rsi(df['close'], length=14)
    df['ema20'] = ta.ema(df['close'], length=20)
    df['ema50'] = ta.ema(df['close'], length=50)
    return df

def fetch_rsi_6h(symbol='BTC/USDT'):
    df = exchange.fetch_ohlcv(symbol, timeframe='6h', limit=100)
    df = pd.DataFrame(df, columns=['ts','open','high','low','close','vol'])
    df['ts'] = pd.to_datetime(df['ts'], unit='ms')
    df.set_index('ts', inplace=True)
    df['rsi'] = ta.rsi(df['close'], length=14)
    return df['rsi'].iloc[-1]



def generate_report(symbol='BTC/USDT'):
    df = fetch_ohlcv(symbol=symbol)
    df = compute_indicators(df)
    last = df.iloc[-1]
    rsi_6h = fetch_rsi_6h(symbol=symbol)

    # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä—ã–Ω–∫–∞ –ø–æ 4h
    df_struct = fetch_ohlcv(symbol=symbol, timeframe='4h')
    df_struct = detect_market_structure(df_struct)
    structure = df_struct.iloc[-1].get('structure', '‚Äî')

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    text = (
        f"üìä {symbol}\n"
        f"üïí {last.name.strftime('%Y-%m-%d %H:%M:%S')}\n"
        f"üí∞ –¶–µ–Ω–∞: {last['close']:.2f} USDT\n"
    )

    # –£—Å–ª–æ–≤–∏—è –¥–ª—è –õ–û–ù–ì–ê
    long_conditions = {
        "RSI < 33": rsi_6h < 33,
        "–ë—ã—á—å—è —Å–≤–µ—á–∞ (close > open)": last['close'] > last['open'],
        "BOS (—Å—Ç—Ä—É–∫—Ç—É—Ä–∞)": structure == 'BOS',
        "EMA20 > EMA50": last['ema20'] > last['ema50'],
        "–¶–µ–Ω–∞ –≤—ã—à–µ EMA20": last['close'] > last['ema20']
    }

    # –£—Å–ª–æ–≤–∏—è –¥–ª—è –®–û–†–¢–ê
    short_conditions = {
        "RSI > 67": rsi_6h > 67,
        "–ú–µ–¥–≤–µ–∂—å—è —Å–≤–µ—á–∞ (close < open)": last['close'] < last['open'],
        "BOS (—Å—Ç—Ä—É–∫—Ç—É—Ä–∞)": structure == 'BOS',
        "EMA20 < EMA50": last['ema20'] < last['ema50'],
        "–¶–µ–Ω–∞ –Ω–∏–∂–µ EMA20": last['close'] < last['ema20']
    }

    long_score = sum(long_conditions.values())
    short_score = sum(short_conditions.values())

    # üü¢ –õ–û–ù–ì
    if long_score >= 4 and long_score > short_score:
        text += (
            "\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            "üü¢ <b>–°–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª –Ω–∞ –≤—Ö–æ–¥ –≤ –õ–û–ù–ì</b>\n"
            f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ {long_score}/5 —É—Å–ª–æ–≤–∏–π:\n"
        )
        for label, passed in long_conditions.items():
            safe_label = html.escape(label)
            text += f"{'üü©' if passed else '‚¨ú'} {safe_label}\n"
        text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        logging.info(f"{symbol} ‚Äî –õ–û–ù–ì: {long_score}/5 —É—Å–ª–æ–≤–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")

    # üî¥ –®–û–†–¢
    elif short_score >= 4 and short_score > long_score:
        text += (
            "\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            "üî¥ <b>–°–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª –Ω–∞ –≤—Ö–æ–¥ –≤ –®–û–†–¢</b>\n"
            f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ {short_score}/5 —É—Å–ª–æ–≤–∏–π:\n"
        )
        for label, passed in short_conditions.items():
            safe_label = html.escape(label)
            text += f"{'üü•' if passed else '‚¨ú'} {safe_label}\n"
        text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        logging.info(f"{symbol} ‚Äî –®–û–†–¢: {short_score}/5 —É—Å–ª–æ–≤–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")

    # üü° –í–æ–∑–º–æ–∂–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
    elif long_score == 3:
        text += (
            f"\nüü° <b>–í–æ–∑–º–æ–∂–Ω—ã–π —Å–∏–≥–Ω–∞–ª –Ω–∞ –õ–û–ù–ì</b> "
            f"({long_score}/5) ‚Äî —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ\n"
        )
    elif short_score == 3:
        text += (
            f"\nüü° <b>–í–æ–∑–º–æ–∂–Ω—ã–π —Å–∏–≥–Ω–∞–ª –Ω–∞ –®–û–†–¢</b> "
            f"({short_score}/5) ‚Äî —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ\n"
        )

    # ‚ö™ –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–∞
    else:
        text += (
            f"\n‚ö™ <b>–ü–æ–∫–∞ –Ω–µ—Ç —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞</b> ‚Äî "
            f"–õ–û–ù–ì: {long_score}/5, –®–û–†–¢: {short_score}/5\n"
        )

    return text


# Telegram-–±–æ—Ç
bot = Bot(token=TOKEN)

def start(update: Update, context: CallbackContext):
    update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –ø–æ BTC/USDT, ETH –∏ SOL.\n"
        "üì• –õ–æ–Ω–≥, üì§ —à–æ—Ä—Ç –∏ üü° —Ä–∞–Ω–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è ‚Äî —Ç–æ–ª—å–∫–æ –ø–æ –¥–µ–ª—É.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /subscribe –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –∏ /unsubscribe –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )

def send_analysis(context: CallbackContext):
    chat_id = context.job.context
    symbols = [
        'BTC/USDT', 'ETH/USDT', 'SOL/USDT', 'DOGE/USDT',
        'LTC/USDT', 'ADA/USDT', 'AVAX/USDT', 'UNI/USDT',
        'LINK/USDT', 'SHIB/USDT', 'ATOM/USDT'
    ]

    for symbol in symbols:
        try:
            report = generate_report(symbol=symbol)
            context.bot.send_message(chat_id=chat_id, text=report, parse_mode='HTML')
        except Exception as e:
            context.bot.send_message(chat_id=chat_id, text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {symbol}: {e}")

def send_filtered_analysis(context: CallbackContext):
    chat_id = context.job.context
    symbols = [
        'BTC/USDT', 'ETH/USDT', 'SOL/USDT', 'DOGE/USDT',
        'LTC/USDT', 'ADA/USDT', 'AVAX/USDT', 'UNI/USDT',
        'LINK/USDT', 'SHIB/USDT', 'ATOM/USDT'
    ]

    sent_count = 0  # ‚Üê —Å—á—ë—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤

    for symbol in symbols:
        try:
            report = generate_report(symbol=symbol)
            if any(x in report for x in ["üü¢", "üî¥", "üü°"]):
                context.bot.send_message(chat_id=chat_id, text=report, parse_mode='HTML')
                sent_count += 1
            else:
                print(f"[{symbol}] ‚Äî –Ω–µ—Ç —Å–∏–≥–Ω–∞–ª–∞, –æ—Ç—á—ë—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        except Exception as e:
            context.bot.send_message(chat_id=chat_id, text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {symbol}: {e}")

    # üßæ –§–∏–Ω–∞–ª—å–Ω—ã–π –∏—Ç–æ–≥
    summary = f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(symbols)} –ø–∞—Ä. –°–∏–≥–Ω–∞–ª—ã –Ω–∞–π–¥–µ–Ω—ã –ø–æ {sent_count} –∏–∑ –Ω–∏—Ö."
    context.bot.send_message(chat_id=chat_id, text=summary)





def subscribe(update: Update, context: CallbackContext):
    chat_id = update.message.chat_id

    text = (
        "üì¨ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞! "
        "üü¢ –õ–æ–Ω–≥ –∏ üî¥ —à–æ—Ä—Ç —Å–∏–≥–Ω–∞–ª—ã –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ –¥–µ–ª—É ‚Äî –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —à—É–º–∞.\n"
        "üü° –¢–∞–∫–∂–µ –ø–æ–ª—É—á–∞–µ—à—å —Ä–∞–Ω–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è, –∫–æ–≥–¥–∞ —Ä—ã–Ω–æ–∫ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –∫ —Ç–æ—á–∫–µ –≤—Ö–æ–¥–∞."
    )
    update.message.reply_text(text)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç, –Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–∏–≥–Ω–∞–ª
    context.job_queue.run_repeating(send_filtered_analysis, interval=1800, first=5, context=chat_id)


def unsubscribe(update: Update, context: CallbackContext):
    chat_id = update.message.chat_id
    jobs = context.job_queue.get_jobs_by_name(str(chat_id))
    for job in jobs:
        job.schedule_removal()
    update.message.reply_text("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")  # ‚Üê –¥–æ–±–∞–≤–ª–µ–Ω–æ
    updater = Updater(token=TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("subscribe", subscribe))
    dp.add_handler(CommandHandler("unsubscribe", unsubscribe))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞—é –∫–æ–º–∞–Ω–¥—ã –≤ Telegram...")  # ‚Üê –¥–æ–±–∞–≤–ª–µ–Ω–æ
    keep_alive()
    updater.start_polling()
    updater.idle()


if __name__ == "__main__":
    main()
